{"version":3,"sources":["components/Section/Section.jsx","components/Feedback/Feedback.jsx","components/Statistics/Statistics.jsx","components/App/App.js","index.js"],"names":["Section","title","children","FeedBack","good","neutral","bad","className","type","onClick","Statistics","total","positivePercentage","onLeaveFeedback","App","state","changeGoodFeedBack","setState","prevState","changeNeutralFeedBack","changeBadFeedBack","console","log","countTotalFeedback","countPositiveFeedbackPercentage","precentage","Math","round","this","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6QAQeA,EANC,SAAC,GAAD,IAAEC,EAAF,EAAEA,MAAOC,EAAT,EAASA,SAAT,OACZ,oCACI,6BAAMD,IACPC,MCMQC,EARE,SAAC,GAAD,IAAEC,EAAF,EAAEA,KAAMC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,IAAjB,OACb,sBAAKC,UAAU,eAAf,UACI,wBAAQC,KAAK,SAASD,UAAU,SAASE,QAASL,EAAlD,kBACA,wBAAQI,KAAK,SAASD,UAAU,SAASE,QAASJ,EAAlD,qBACA,wBAAQG,KAAK,SAASD,UAAU,SAASE,QAASH,EAAlD,qBCYOI,EAhBI,SAAC,GAAD,IAAGN,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,IAAKK,EAAvB,EAAuBA,MAAOC,EAA9B,EAA8BA,mBAAoBC,EAAlD,EAAkDA,gBAAlD,OACf,qBAAKN,UAAU,kBAAf,SACc,IAATH,GAA0B,IAAZC,GAAyB,IAARC,EAC5B,4BAAIO,IAEJ,gCACI,uCAAUT,KACV,0CAAcC,EAAd,OACA,sCAASC,KACR,wCAAWK,KACZ,oDAAuBC,EAAvB,aC4DDE,G,kNAhEbC,MAAQ,CACFX,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAEXU,mBAAqB,WACf,EAAKC,UAAS,SAAAC,GACV,MAAO,CACHd,KAAMc,EAAUd,KAAO,O,EAIrCe,sBAAwB,WAClB,EAAKF,UAAS,SAAAC,GACV,MAAO,CACHb,QAASa,EAAUb,QAAU,O,EAI3Ce,kBAAoB,WACX,EAAKH,UAAS,SAAAC,GACb,MAAO,CACHZ,IAAKY,EAAUZ,IAAM,MAG/Be,QAAQC,IAAI,c,EAGhBC,mBAAqB,WAEnB,OADc,EAAKR,MAAMT,IAAM,EAAKS,MAAMV,QAAU,EAAKU,MAAMX,M,EAGjEoB,gCAAkC,WAChC,IAAMb,EAAQ,EAAKI,MAAMT,IAAM,EAAKS,MAAMV,QAAU,EAAKU,MAAMX,KACzDqB,EAAad,EAA0B,IAAlB,EAAKI,MAAMX,KAAaO,EAAQ,EAC3D,OAAOe,KAAKC,MAAMF,I,4CAGpB,WACM,OACE,sBAAKlB,UAAU,YAAf,UACE,cAAC,EAAD,CAASN,MAAM,wBAAf,SACE,cAAC,EAAD,CACEG,KAAMwB,KAAKZ,mBACXX,QAASuB,KAAKT,sBACdb,IAAKsB,KAAKR,sBAId,cAAC,EAAD,CAASnB,MAAM,aAAf,SACG,cAAC,EAAD,CACCG,KAAMwB,KAAKb,MAAMX,KACjBC,QAASuB,KAAKb,MAAMV,QACpBC,IAAKsB,KAAKb,MAAMT,IAChBK,MAAOiB,KAAKL,qBACZX,mBAAoBgB,KAAKJ,kCACzBX,gBAAgB,+B,GA1DdgB,IAAMC,YCDxBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.28a6d75f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Section = ({title, children}) => (\r\n    <section>\r\n        <h2>{ title}</h2>\r\n      {children}  \r\n    </section>\r\n)\r\nexport default Section;","import React from 'react';\r\n\r\n\r\nconst FeedBack = ({good, neutral, bad }) => (\r\n    <div className=\"buttons__set\">\r\n        <button type=\"button\" className=\"button\" onClick={good}>Good</button>\r\n        <button type=\"button\" className=\"button\" onClick={neutral}>Neutral</button>\r\n        <button type=\"button\" className=\"button\" onClick={bad}>Bad</button>\r\n    </div>\r\n                  \r\n);\r\nexport default FeedBack;\r\n","import React from 'react';\r\n\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positivePercentage, onLeaveFeedback}) => (\r\n    <div className=\"statistics__set\">\r\n        {good === 0 && neutral === 0 && bad === 0 ?\r\n            <p>{onLeaveFeedback}</p>\r\n            :\r\n            <div >\r\n                <p>Good: {good}</p>\r\n                <p>Neutral: { neutral} </p>\r\n                <p>Bad: {bad}</p>\r\n                 <p>Total: {total}</p>\r\n                <p>Positive feedback: {positivePercentage}%</p>\r\n            </div>\r\n        }\r\n    </div>\r\n                  \r\n);\r\nexport default Statistics;\r\n\r\n","import React from 'react';\nimport Section from '../Section/Section';\nimport FeedBack from '../Feedback/Feedback';\nimport Statistics from '../Statistics/Statistics';\nimport './App.css';\n\n\nclass App extends React.Component {\n\n  state = {\n        good: 0,\n        neutral: 0,\n        bad: 0,\n  };\n  changeGoodFeedBack = () => {\n        this.setState(prevState => {\n            return {\n                good: prevState.good + 1,\n            }\n        })\n  }\n  changeNeutralFeedBack = () => {\n        this.setState(prevState => {\n            return {\n                neutral: prevState.neutral + 1,\n           }\n        })\n  }\n  changeBadFeedBack = () => {\n           this.setState(prevState => {\n            return {\n                bad: prevState.bad + 1,\n           }\n       })\n      console.log('Click bad')\n  }\n  \n  countTotalFeedback = () => {\n    const total = this.state.bad + this.state.neutral + this.state.good;\n    return total\n  }\n  countPositiveFeedbackPercentage = () => {\n    const total = this.state.bad + this.state.neutral + this.state.good;\n    const precentage = total ? this.state.good * 100 / total : 0;\n    return Math.round(precentage);\n  }\n  \n  render() {\n        return (\n          <div className=\"container\">\n            <Section title=\"Please leave feedback\">\n              <FeedBack\n                good={this.changeGoodFeedBack}\n                neutral={this.changeNeutralFeedBack}\n                bad={this.changeBadFeedBack}\n               />\n            </Section>\n\n            <Section title=\"Statistics\">\n               <Statistics\n                good={this.state.good}\n                neutral={this.state.neutral}\n                bad={this.state.bad}\n                total={this.countTotalFeedback()}\n                positivePercentage={this.countPositiveFeedbackPercentage()}\n                onLeaveFeedback=\"No feedback given\"\n                />\n             </Section>\n          </div>\n    )\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}